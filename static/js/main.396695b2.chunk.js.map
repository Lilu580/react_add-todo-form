{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","id","title","completed","classNames","TodoList","todos","map","username","findUser","usersFromServer","find","toDoList","userId","App","useState","titleFornewTodos","setTitleFornewTodos","userIdFornewTodos","setUserIdFornewTodos","newTodos","setnewTodos","invalidTitle","setInvalidTitle","invalidUser","setInvalidUser","action","method","onSubmit","event","preventDefault","todoToAdd","Math","max","prevTodos","type","value","onChange","target","placeholder","Number","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.396695b2.chunk.js","sourcesContent":["type Props = {\n  user: User\n};\n\nexport const UserInfo:React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: ToDoList,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo', {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: ToDoList[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction findUser(id: number) {\n  return usersFromServer.find(user => user.id === id) || null;\n}\n\nconst toDoList = todosFromServer.map(todo => (\n  {\n    ...todo,\n    user: findUser(todo.userId),\n  }\n));\n\nexport const App = () => {\n  const [titleFornewTodos, setTitleFornewTodos] = useState('');\n  const [userIdFornewTodos, setUserIdFornewTodos] = useState(0);\n  const [newTodos, setnewTodos] = useState(toDoList);\n  const [invalidTitle, setInvalidTitle] = useState(false);\n  const [invalidUser, setInvalidUser] = useState(false);\n\n  function getId(todos: Todo[]): number {\n    return Math.max(...todos.map(todo => todo.id)) + 1;\n  }\n\n  const handleNewTitle = ((event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitleFornewTodos(event.target.value);\n    setInvalidTitle(false);\n  });\n\n  const handleSelectUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserIdFornewTodos(Number(event.target.value));\n    setInvalidUser(false);\n  };\n\n  const clear = () => {\n    setInvalidTitle(false);\n    setInvalidUser(false);\n    setUserIdFornewTodos(0);\n    setTitleFornewTodos('');\n  };\n\n  const handleNewTodos = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (userIdFornewTodos && titleFornewTodos) {\n      const todoToAdd = {\n        id: getId(newTodos),\n        title: titleFornewTodos,\n        completed: false,\n        userId: userIdFornewTodos,\n        user: findUser(userIdFornewTodos),\n      };\n\n      setnewTodos(prevTodos => [...prevTodos, todoToAdd]);\n\n      clear();\n    }\n\n    if (!userIdFornewTodos) {\n      setInvalidUser(true);\n    }\n\n    if (!titleFornewTodos) {\n      setInvalidTitle(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleNewTodos}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={titleFornewTodos}\n            onChange={handleNewTitle}\n            placeholder=\"title...\"\n          />\n          {invalidTitle\n            && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            placeholder=\"Choose a user\"\n            value={userIdFornewTodos}\n            onChange={handleSelectUser}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {invalidUser\n          && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={newTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}